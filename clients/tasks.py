from datetime import datetime
from email.mime.image import MIMEImage

import requests
import hashlib
import logging
import time
from glisti.celery import app
from glisti.settings import GC_API, GC_ACCOUNT, GROUP_ID_TICKS, GROUP_ID_WORMS, EMAIL_HOST_USER, SECRET_KEY
from django.core.mail import send_mail, EmailMultiAlternatives
from pathlib import Path
from clients.models import Client


logger = logging.getLogger('glisti.celery')


def get_group_items(group_id: str) -> list:
    response = requests.get(f'https://{GC_ACCOUNT}.getcourse.ru/pl/api/account/groups/{group_id}/users?key={GC_API}&created_at[from]=2022-05-25').json()

    if not response.get('success'):
        logger.error(f'{response.get("error_message")} - {response.get("error_code")}')
        return []

    export_id = response.get('info').get('export_id')

    if not export_id:
        logger.error(
            f'Export ID –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. {response.get("error_message")} - {response.get("error_code")}')
        return []

    url = f'https://{GC_ACCOUNT}.getcourse.ru/pl/api/account/exports/{export_id}?key={GC_API}'

    response = requests.get(url).json()

    k = 10
    while not response.get('success') and response.get('error_code') == 909 and k > 0:
        time.sleep(10)
        response = requests.get(url).json()
        k -= 1

    if not response.get('success') or not response.get('info').get('items'):
        logger.error(f'Export –∑–∞–∫–∞–∑–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. {response.get("error_message")} - {response.get("error_code")}')
        return []

    return response['info']['items']


def add_user(email: str, name: str, course: int):
    s = f'{email}{(datetime.now() - datetime(1970, 1, 1)).total_seconds()}'
    code = hashlib.sha256(s.encode()).hexdigest()
    new_user = Client(email=email, name=name, course=(course+1), rolls=(2 + 3*course), code=code)
    new_user.save()
    send_letter([email],
                '–ë–ï–°–ü–†–û–ò–ì–†–´–®–ù–û–ï –ö–û–õ–ï–°–û –ó–î–û–†–û–í–¨–Ø',
                f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {new_user.name}'
                f'<br><br>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –í–∞—Å —Å –ø–æ–∫—É–ø–∫–æ–πü§ó –∏ –ø—Ä–∏–≥–ª–∞—à–∞—é –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –ë–ï–°–ü–†–û–ò–ì–†–´–®–ù–û–ú –ö–æ–ª–µ—Å–µ –ó–¥–æ—Ä–æ–≤—å—è üéÅ'
                f'<br><br>üçè–í–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ, —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤ –ø–∏—Å—å–º–µ '
                f'<br>üçè–ù–∞ —Å–∞–π—Ç–µ –≤—ã –Ω–∞–π–¥—ë—Ç–µ –ö–æ–ª–µ—Å–æ –ó–¥–æ—Ä–æ–≤—å—è –∏ –ø–æ–¥ –Ω–∏–º —É–≤–∏–¥–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ö—Ä—É—Ç–∏—Ç—å –∫–æ–ª–µ—Å–æ¬ª'
                f'<br>üçè–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π—Ç–µ –ø—Ä–∏–∑—ã!'
                f'<br><br>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–∏–≥—Ä–∞–Ω–Ω–æ–º –ø–æ–¥–∞—Ä–∫–µ –ø—Ä–∏–¥—ë—Ç –≤–∞–º –Ω–∞ –ø–æ—á—Ç—É.'
                f'<br><br>–æ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Å—Å—ã–ª–∫–∞ ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è'
                f'<br><a href="www.forma.com/?email={email}&key={code}">www.forma.com/?email={email}&key={code}</a>')


@app.task(name="tasks.get-users")
def get_users():
    # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –∫–ª–µ—â–∞–º, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–¥
    for user in get_group_items(GROUP_ID_TICKS):
        existing = Client.objects.filter(email=user[1])
        if not existing:
            add_user(user[1], user[5], 0)

    # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≥–ª–∏—Å—Ç–∞–º, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–¥
    for user in get_group_items(GROUP_ID_WORMS):
        existing = Client.objects.filter(email=user[1])
        if not existing:
            add_user(user[1], user[5], 1)


@app.task(name='tasks.send-letter')
def send_letter(recipients, subject, message):
    image_path = 'static/img/email_picture.JPG'
    image_name = Path(image_path).name
    email = EmailMultiAlternatives(subject=subject,
                                   body=message,
                                   from_email=EMAIL_HOST_USER,
                                   to=recipients)
    email.content_subtype = 'html'
    email.mixed_subtype = 'related'

    with open(image_path, mode='rb') as f:
        image = MIMEImage(f.read())
        email.attach(image)
        image.add_header('Content-ID', f"{image_name}")
    email.send()
